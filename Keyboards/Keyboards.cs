using Telegram.Bot.Types.ReplyMarkups;
using PostgreSQL;
using ConfigFile;

namespace Bot_Keyboards
{
    public static class Keyboards
    {

        // MENU
        public static InlineKeyboardMarkup MainMenuButtons = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "ü™ê –ü–∞—Ä—Å–∏–Ω–≥", callbackData: "show_services"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callbackData: "settings"),
            },
        });

        
        public static ReplyKeyboardMarkup MenuKb()
        {
            ReplyKeyboardMarkup Keyboard;
            Keyboard = new(new []
            {
                new KeyboardButton[] {"–ú–µ–Ω—é"},
            })
            {
                ResizeKeyboard = true,
            };
            return Keyboard;
        }

        // SETTINGS
        public static InlineKeyboardMarkup SettingsKb()
        {
            InlineKeyboardMarkup kb;

            kb = new(new []
            {
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callbackData: "black_list"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callbackData: "configuration"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_params"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "üèö –í –º–µ–Ω—é", callbackData: "back_to_menu"),
                },
            });

            return kb;
        }

        public static InlineKeyboardMarkup BlackListKb(long chatId)
        {
            string blackList = DB.GetBlackList(chatId);
            InlineKeyboardMarkup kb;
            InlineKeyboardButton blackListBtn;


            if(blackList == "–í–∫–ª—é—á–∏—Ç—å")
            {
                blackListBtn = InlineKeyboardButton.WithCallbackData(text: "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: ON", callbackData: "black_list_status");
            }
            else
            {
                blackListBtn = InlineKeyboardButton.WithCallbackData(text: "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: OFF", callbackData: "black_list_status");
            }

            kb = new(new []
            {
                new []
                {
                    blackListBtn,
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", callbackData: "links_blacklist"),  
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callbackData: "delete_sellers"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
                }
            });

            return kb;
        }

        public static InlineKeyboardMarkup ConfigurationKb()
        {
            InlineKeyboardMarkup kb;

            kb = new(new []
            {
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–¢–µ–∫—Å—Ç WhatsApp", callbackData: "whatsapp_text"),
                    InlineKeyboardButton.WithCallbackData(text: "–¢–∞–π–º-–∞—É—Ç", callbackData: "timeout"),  
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
                }
            });

            return kb;
        }

        public static InlineKeyboardMarkup SellerSettingsKb(long chatId)
        {
            string sellerType = DB.GetSellerType(chatId);
            int sellerAds = DB.GetSellerTotalAds(chatId);
            InlineKeyboardMarkup kb;
            InlineKeyboardButton sellerTypeBtn;
            InlineKeyboardButton sellerAdsBtn;

            if(sellerType == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ")
            {
                sellerTypeBtn = InlineKeyboardButton.WithCallbackData(text: "–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞: –ß–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞", callbackData: "account_type");
            }
            else
            {
                sellerTypeBtn = InlineKeyboardButton.WithCallbackData(text: "–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞: –í—Å–µ —Ç–∏–ø—ã", callbackData: "account_type");
            }

            if(sellerAds == 1)
            {
                sellerAdsBtn = InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ 20: ON", callbackData: "seller_announ_count");
            }
            else
            {
                sellerAdsBtn = InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ 20: OFF", callbackData: "seller_announ_count");
            }

            kb = new(new []
            {
                new []
                {
                    sellerTypeBtn,
                },
                new []
                {
                    sellerAdsBtn,
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_rating"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤", callbackData: "seller_feedback"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_reg"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
                },
            });

            return kb;
        }

        public static InlineKeyboardMarkup RegDateKb()
        {
            DateTime today = DateTime.Today;
            InlineKeyboardMarkup regDateKb;

            regDateKb = new(new []
            {
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–°–µ–≥–æ–¥–Ω—è - {today.ToString("dd.MM.yyyy")}", callbackData: "today_date"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–û—Ç–∫–ª—é—á–∏—Ç—å", callbackData: "disable_reg_date"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_seller_settings"),
                }
            });

            return regDateKb;
        }

        public static InlineKeyboardMarkup sellerRatingKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: $"0", callbackData: "0"),
                InlineKeyboardButton.WithCallbackData(text: $"1", callbackData: "1"),
                InlineKeyboardButton.WithCallbackData(text: $"2", callbackData: "2"),
                InlineKeyboardButton.WithCallbackData(text: $"3", callbackData: "3"),
                InlineKeyboardButton.WithCallbackData(text: $"4", callbackData: "4"),
                InlineKeyboardButton.WithCallbackData(text: $"5", callbackData: "5"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_seller_settings"),
            }
        });

        public static InlineKeyboardMarkup sellerFeedbackKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: $"–û—Ç–∫–ª—é—á–∏—Ç—å", callbackData: "disable_seller_feedback"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_seller_settings"),
            }
        });

        public static InlineKeyboardMarkup blacklistLinksKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏", callbackData: "delete_all_links"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_blacklist"),
            },
        });


        // PARSER
        public static InlineKeyboardMarkup startPars = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üé≠ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callbackData: "start_pars"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_services_list"),
            },
        });

        // BACK KEYBOARDS
        public static InlineKeyboardMarkup backToMenu = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í –º–µ–Ω—é", callbackData: "back_to_menu"),
            },
        });
        public static InlineKeyboardMarkup backToBlackList = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_blacklist"),
            },
        });

        public static InlineKeyboardMarkup backToConfiguration = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
            },
        });
        public static InlineKeyboardMarkup backToSellerSettings = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_seller_settings"),
            },
        });

        public static InlineKeyboardMarkup backToCountries = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackData: "back_to_countries"),
            },
        });
    }
}