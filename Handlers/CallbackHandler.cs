using States;
using PostgreSQL;
using Bot_Keyboards;
using ConfigFile;
using Modules;
using ProjectFunctions;

using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;



namespace Handlers
{
    public static class CallHandler
    {
        private static string mainMenuPhoto = Config.menuPhoto;
        public static async Task BotOnCallbackQueryReceived(ITelegramBotClient botClient, CallbackQuery callbackQuery)
        {
            try
            {
                long chatId = callbackQuery.Message!.Chat.Id;
                int messageId = callbackQuery.Message.MessageId;
                string? firstName = callbackQuery.Message.Chat.FirstName;
                string state = DB.GetState(chatId);

                if(chatId.ToString()[0]=='-')
                {
                    return;
                }


                // if(Functions.CheckSubChannel(botClient.GetChatMemberAsync(Config.workChatId, chatId).Result.Status.ToString()))
                // {
                //     await botClient.SendTextMessageAsync(
                //         chatId: chatId,
                //         text: $"<b> –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ <a href=\"https://t.me/HORDE_SQUAD_BOT\">–±–æ—Ç–∞</a> –∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç.</b>",
                //         parseMode: ParseMode.Html
                //     );
                //     return;
                // }

                switch(callbackQuery.Data)
                {
                    case "start_pars":
                        if(DB.GetParser(chatId) == "Start")
                        {
                            await botClient.AnswerCallbackQueryAsync(
                                callbackQueryId: callbackQuery.Id,
                                text: "–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥.",
                                showAlert: true
                            );
                            return;
                        }

                        string platform = DB.GetPlatform(chatId);
                        DB.UpdateParser(chatId, "Start");
                        Platforms.GetParser(botClient, chatId, platform);

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: $"<b>{platform.ToUpperInvariant()}</b>\n\n<b>–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è. –ü–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–Ω–µ–º–∏.</b>\n\n<b>‚ùï –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ </b><code>–°—Ç–æ–ø</code>",
                            parseMode: ParseMode.Html
                        );
                        return;

                    case "show_services":
                    // –ü–û–°–ú–û–¢–†–ï–¢–¨ –°–ï–†–í–ò–°–´
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>‚Äçü¶∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: CountriesKeyboards.CountriesSitesKb
                        );
                        return;
                    case "settings":
                    // –ù–ê–°–¢–†–û–ô–ö–ò
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.SettingsText(),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.SettingsKb()
                        );
                        return;
                    case "black_list":
                    // –ß–°
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.BlackListText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BlackListKb(chatId)
                        );
                        return;
                    case "black_list_status":
                        DB.UpdateBlackList(chatId);

                        await botClient.EditMessageReplyMarkupAsync(
                            chatId: chatId,
                            messageId: messageId,
                            replyMarkup: Keyboards.BlackListKb(chatId)
                        );
                        return;
                    case "links_blacklist":
                        DB.UpdateState(chatId, "LinksBlacklist");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –ö–ê–¢–ï–ì–û–†–ò–ô —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.blacklistLinksKb
                        );
                        return;
                    case "delete_sellers":
                        DB.UpdateState(chatId, "DeleteSellers");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>—Å—Å—ã–ª–∫–∞1</code><b>|</b><code>—Å—Å—ã–ª–∫–∞2</code>",
                            replyMarkup: Keyboards.backToBlackList,
                            parseMode: ParseMode.Html
                        );
                        return;

                    case "configuration":
                    // –ö–û–ù–§–ò–ì
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.ConfigurationText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.ConfigurationKb()
                        );
                        return;
                    case "whatsapp_text":
                        DB.UpdateState(chatId, "WhatsappText");

                        string text = "<b>üñä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è WhatsApp (<u>–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤</u>):</b>\n\n<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:</b>\n<code>@link</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É</i>\n<code>@title</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@price</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@location</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@seller_name</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞</i>\n\n‚úîÔ∏è <b>–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç –∏ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.</b>";

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: text,
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.backToConfiguration
                        );
                        return;
                    case "timeout":
                        DB.UpdateState(chatId, "Timeout");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –æ—Ç 10 –¥–æ 30 —Å–µ–∫—É–Ω–¥:</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.backToConfiguration
                        );
                        return;

                    case "seller_params":
                    // –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–û–î–ê–í–¶–ê
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.SellerSettingsText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.SellerSettingsKb(chatId)
                        );
                        return;
                    case "account_type":
                        DB.UpdateSellerType(chatId);

                        await botClient.EditMessageReplyMarkupAsync(
                            chatId: chatId,
                            messageId: messageId,
                            replyMarkup: Keyboards.SellerSettingsKb(chatId)
                        );
                        return;
                    case "seller_announ_count":
                        int sellerAds = DB.GetSellerTotalAds(chatId);
                        
                        if(sellerAds == 1)
                        {
                            DB.UpdateSellerTotalAds(chatId, 0);

                            await botClient.AnswerCallbackQueryAsync(
                                callbackQueryId: callbackQuery.Id,
                                text: "–§–∏–ª—å—Ç—Ä \"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ 20\" –æ—Ç–∫–ª—é—á–µ–Ω.",
                                showAlert:true
                            );
                        }
                        else
                        {
                            DB.UpdateSellerTotalAds(chatId, 1);

                            await botClient.AnswerCallbackQueryAsync(
                                callbackQueryId: callbackQuery.Id,
                                text: "–¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ 20 –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                                showAlert:true
                            );
                        }

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.SellerSettingsText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.SellerSettingsKb(chatId)
                        );
                        return;
                    case "seller_rating":
                        DB.UpdateState(chatId, "SellerRating");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ü—Ä–∏–º–µ—Ä:</b> <code>3.2</code> [0 - 5]\n\n<b>–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç</b> <code>3.2</code><b>.</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.sellerRatingKb
                        );
                        return;
                    case "seller_feedback":
                        DB.UpdateState(chatId, "SellerFeedback");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ü—Ä–∏–º–µ—Ä:</b> <code>10</code>\n\n<b>–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç</b> <code>10</code><b>.</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.sellerFeedbackKb
                        );
                        return;
                    case "seller_reg":
                        DB.UpdateState(chatId, "SellerRegData");
                        DateTime today = DateTime.Now;
                        
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: $"<b>‚§µÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä:</b> <code>{today.AddDays(-10).ToString("dd.MM.yyyy")}</code>\n\n<b>–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ [</b><code>{today.AddDays(-10).ToString("dd.MM.yyyy")}</code> - <code>{today.ToString("dd.MM.yyyy")}</code><b>].</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.RegDateKb()
                        );
                        return;
                    
                    // –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î
                    case "back_to_menu":
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.MenuText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.MainMenuButtons
                        );
                        return;
                    case "back_to_settings":
                        DB.UpdateState(chatId, "MainMenu");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.SettingsText(),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.SettingsKb()
                        );
                        return;
                    case "back_to_blacklist":
                        DB.UpdateState(chatId, "MainMenu");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.BlackListText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BlackListKb(chatId)
                        );
                        return;
                    case "back_to_configuration":
                        DB.UpdateState(chatId, "MainMenu");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.ConfigurationText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.ConfigurationKb()
                        );
                        return;
                    case "back_to_seller_settings":
                        DB.UpdateState(chatId, "MainMenu");

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.SellerSettingsText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.SellerSettingsKb(chatId)
                        );
                        return;
                    case "back_to_services_list":
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>‚Äçü¶∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: CountriesKeyboards.CountriesSitesKb
                        );
                        return;
                }

                foreach(string country in Config.Countries)
                {
                    if(callbackQuery.Data == country)
                    {
                        if(DB.GetParser(chatId) == "Start")
                        {
                            await botClient.AnswerCallbackQueryAsync(
                                callbackQueryId: callbackQuery.Id,
                                text: "–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥.",
                                showAlert: true
                            );
                            return;
                        }
                        
                        DB.UpdatePlatform(chatId, callbackQuery.Data);

                        string text = $"<b>{country.ToUpperInvariant()}</b>\n\n<b>‚öí –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–ª–æ—â–∞–¥–∫–∏:</b> <code>–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n\n<b>‚õΩ –§–∏–ª—å—Ç—Ä—ã –ø–ª–æ—â–∞–¥–∫–∏:</b>\n\t\t\t\t‚Ä¢ –ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞\n\t\t\t\t‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\t\t\t\t‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\t\t\t\t‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\t\t\t\t‚Ä¢ –ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤";

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: text,
                            replyMarkup: Keyboards.startPars,
                            parseMode: ParseMode.Html
                        );
                    }
                }

                switch (state)
                {
                    case "SellerRegData":
                        SellerRegDateState.CallBackHandler(botClient, callbackQuery, chatId, messageId);
                        return;
                    case "SellerRating":
                        SellerRatingState.CallBackHandler(botClient, callbackQuery, chatId, messageId);
                        return;
                    case "SellerFeedback":
                        SellerFeedbackState.CallBackHandler(botClient, callbackQuery, chatId, messageId);
                        return;
                    case "LinksBlacklist":
                        LinksBlacklistState.CallBackHandler(botClient, callbackQuery, chatId, messageId);
                        return;
                    default:
                        return;
                }
            }
            catch
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQueryId: callbackQuery.Id,
                    text: Config.errorMessage,
                    showAlert:false
                );
                return; 
            }
        }
    }            
}
